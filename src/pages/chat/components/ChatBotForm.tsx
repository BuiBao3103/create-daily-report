
import { Affix, Button, Flex, Textarea } from "@mantine/core";
import { useForm } from "@mantine/form";
import { ChatBotLocalStore_AddMessage, ChatBotLocalStore_GetOrCreateSessionId, ChatMessage } from "../store/ChatBotLocalStore";
import { RefObject, useEffect, useRef } from "react";
import ChatBotToolMenu from "./ChatBotToolMenu";
import { useMutation } from "@tanstack/react-query";
import axios from "axios";

interface ChatBoxFormProps {
    messageBoxRef: RefObject<{
        updateLoading: (loading: boolean) => void,
        reloadChatBox: () => void,
    }>
}

export default function ChatBotForm({ messageBoxRef }: ChatBoxFormProps) {
    const textareaRef = useRef<HTMLTextAreaElement>(null);

    const form = useForm<ChatMessage>({
        initialValues: {
            message: "",
            sender: "user",
        },
    });

    const mutation = useMutation({
        mutationFn: async (value: ChatMessage) => {
            updateLoading(true);
            ChatBotLocalStore_AddMessage(value);
            form.reset();
            // demo loading KHI G·∫ÆN API NH·ªö B·ªé K·∫∫O T·ªêN TH√äM 2 GI√ÇY
            // await new Promise(resolve => setTimeout(resolve, 2000));
            // return {
            //     data: [
            //         {
            //             "text": "# Ti√™u ƒë·ªÅ c·∫•p 1\n\n## Ti√™u ƒë·ªÅ c·∫•p 2\n\n### Ti√™u ƒë·ªÅ c·∫•p 3" +
            //                 "\n\n---\n\n**ƒê√¢y l√† ch·ªØ ƒë·∫≠m**\n\n*ƒê√¢y l√† ch·ªØ nghi√™ng*\n\n" +
            //                 "***ƒê√¢y l√† ch·ªØ v·ª´a ƒë·∫≠m v·ª´a nghi√™ng***\n\n~~ƒê√¢y l√† ch·ªØ b·ªã g·∫°ch ngang~~\n\n" +
            //                 "[ƒê√¢y l√† m·ªôt li√™n k·∫øt](https://example.com)\n\n---\n\n" +
            //                 "### üî¢ Danh s√°ch c√≥ th·ª© t·ª± (Ordered List)\n\n" +
            //                 "1. M·ª•c s·ªë m·ªôt\n2. M·ª•c s·ªë hai\n3. M·ª•c s·ªë ba\n   1. M·ª•c con 1\n   2. M·ª•c con 2\n\n---\n\n" +
            //                 "### üîò Danh s√°ch kh√¥ng th·ª© t·ª± (Unordered List)\n\n" +
            //                 "- T√°o\n- Chu·ªëi\n- Cam\n  - Cam s√†nh\n  - Cam xo√†n\n\n---\n\n" +
            //                 "### üìã Tr√≠ch d·∫´n\n\n> ƒê√¢y l√† m·ªôt ƒëo·∫°n tr√≠ch d·∫´n.\n> N√≥ c√≥ th·ªÉ d√†i nhi·ªÅu d√≤ng.\n\n" +
            //                 "---\n\n### üß± Code n·ªôi d√≤ng\n\nC√¢u l·ªánh `npm install` d√πng ƒë·ªÉ c√†i ƒë·∫∑t g√≥i." +
            //                 "\n\n---\n\n### üß© Kh·ªëi code (Code block)\n\n```js\nfunction sayHello(name) {\n  console.log(\"Hello, \" + name);\n}\n```" +
            //                 "\n\n---\n\n### üìä B·∫£ng\n\n| T√™n   | Tu·ªïi | Ngh·ªÅ nghi·ªáp     |\n|--------|------|----------------|" +
            //                 "\n| An     | 25   | K·ªπ s∆∞ ph·∫ßn m·ªÅm |\n| B√¨nh   | 30   | Thi·∫øt k·∫ø UI/UX |\n| Chi    | 28   | Marketing       |" +
            //                 "\n\n---\n\n### üìå H√¨nh ·∫£nh\n\n![OpenAI Logo](https://storage.googleapis.com/support-kms-prod/5Af3SzwJLJ3lRVhBbtUjZbzPtXuIUj7xzeJw)" +
            //                 "\n\n---\n\n### ‚úÖ Task list\n\n- [x] Vi·∫øt t√†i li·ªáu\n- [ ] T·∫°o giao di·ªán\n- [ ] Ki·ªÉm th·ª≠\n\n---\n\n" +
            //                 "### üî£ HTML trong Markdown\n\n<div style=\"color: red; font-weight: bold;\">B·∫°n c√≥ th·ªÉ d√πng HTML n·∫øu tr√¨nh ph√¢n t√≠ch h·ªó tr·ª£</div>"
            //         },
            //     ]
            // }
            return await axios.post('https://930a-210-245-33-111.ngrok-free.app/webhook/daily-report', {
                message: value.message,
                sessionId: ChatBotLocalStore_GetOrCreateSessionId(),
            });
        },
        onSuccess: (response) => {
            updateLoading(false);
            if (response.data) {
                const messages = response.data;
                messages.forEach((msg: { text: string }) => {
                    ChatBotLocalStore_AddMessage(
                        createBotMessage(msg.text)
                    )
                });
            } else {
                ChatBotLocalStore_AddMessage(
                    createBotMessage("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")
                );
            }
        },
        onError: (error: any) => {
            updateLoading(false);
            const isNetworkError = error.isAxiosError && !error.response;
            ChatBotLocalStore_AddMessage(
                createBotMessage(isNetworkError
                    ? "Hi·ªán t·∫°i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi m√°y ch·ªß."
                    : "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."
                )
            );
        },
    });

    // create bot message
    const createBotMessage = (message: string): ChatMessage => {
        return {
            message,
            sender: "bot",
        }
    }

    // handle submit
    const handleChatSubmit = form.onSubmit((values) => {
        const message = values.message.trim();
        if (message !== "") {
            values.message = message;
            mutation.mutate(values)
        }
    });

    // udpate loading function
    const updateLoading = (l: boolean) => {
        messageBoxRef.current?.updateLoading(l);
    }

    // handle enter keydown
    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleChatSubmit();
        }
    };

    useEffect(() => {
        textareaRef.current?.focus();
    }, [mutation.isPending]);

    return (
        <Affix
            w="100%"
            style={{ backgroundColor: 'var(--mantine-color-body)' }}
            position={{ bottom: 0, left: 0 }}
        >
            <form onSubmit={handleChatSubmit}>
                <Flex
                    justify="center"
                    align="center"
                    direction="row"
                    px="10%"
                    gap={4}
                    mb={20}
                    mt={5}
                >
                    <ChatBotToolMenu loading={mutation.isPending} messageBoxRef={messageBoxRef} />
                    <Textarea
                        ref={textareaRef}
                        autosize
                        minRows={1}
                        maxRows={5}
                        w="90%"
                        placeholder="Nh·∫≠p tin nh·∫Øn..."
                        disabled={mutation.isPending}
                        onKeyDown={handleKeyDown}
                        {...form.getInputProps("message")}
                    />
                    <Button
                        type="submit"
                        loading={mutation.isPending}
                    >
                        G·ª≠i
                    </Button>
                </Flex>
            </form>
        </Affix>
    );
}